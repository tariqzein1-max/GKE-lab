name: helm-ci
on:
  push:

permissions:
  id-token: write
  contents: read

env:
  PROJECT_ID: gke-lab-474404
  REGION: us-central1
  AR_REPO: apps
  CLUSTER_NAME: gke-lab
  NAMESPACE: app
  IMAGE_NAME: hello
  USE_GKE_GCLOUD_AUTH_PLUGIN: "True"

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        working-directory: app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest
      - name: Run pytest
        working-directory: app
        env:
          PYTHONPATH: .
        run: python -m pytest -q

  helm-deploy:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOYER_SA }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Install GKE gcloud auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet || true
          if ! command -v gke-gcloud-auth-plugin >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
          fi

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set image env
        run: |
          echo "IMAGE_REPO=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # âœ… Build & push with official action + GHA cache
      - name: Build & push with cache
        uses: docker/build-push-action@v6
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Install Syft only (SBOM)
      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
          | sh -s -- -b /usr/local/bin
          syft --version

      - name: SBOM (syft)
        run: syft "$IMAGE_REPO:$IMAGE_TAG" -o json > sbom.json || true

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.json

      - name: Trivy scan (fail on CRITICAL)
        uses: aquasecurity/trivy-action@0.19.0
        with:
          image-ref: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL'
          exit-code: '1'

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Create namespace (idempotent)
        run: |
          kubectl create ns "${{ env.NAMESPACE }}" --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm upgrade --install
        run: |
          helm upgrade --install hello charts/hello \
            --namespace "${{ env.NAMESPACE }}" \
            --set image.repository="${IMAGE_REPO}" \
            --set image.tag="${IMAGE_TAG}" \
            --wait --timeout 5m

      - name: Wait for Service external IP
        run: |
          for i in {1..60}; do
            IP=$(kubectl get svc hello -n "${{ env.NAMESPACE }}" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -n "$IP" ]; then
              echo "LB_IP=$IP" >> $GITHUB_ENV
              echo "LB IP: $IP"
              exit 0
            fi
            echo "Waiting for LoadBalancer IP..."
            sleep 10
          done
          echo "No LB IP assigned in time"; exit 1

      - name: Smoke test (content check)
        run: |
          for i in {1..15}; do
            BODY=$(curl -fsS --max-time 5 "http://$LB_IP/" || true)
            echo "$BODY"
            if echo "$BODY" | grep -q "Hello from GKE Autopilot"; then
              echo "Smoke test OK"; exit 0
            fi>
            echo "Retrying..."
            sleep 5
          done
          echo "Smoke test failed"; exit 1

      - name: Show endpoints
        run: kubectl get svc -n "${{ env.NAMESPACE }}" -o wide
